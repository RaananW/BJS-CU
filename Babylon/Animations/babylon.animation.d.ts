declare module BABYLON {
    class Animation {
        public name: string;
        public targetProperty: string;
        public framePerSecond: number;
        public dataType: number;
        public loopMode: number;
        private _keys;
        private _offsetsCache;
        private _highLimitsCache;
        private _stopped;
        public _target: any;
        private _easingFunction;
        public targetPropertyPath: string[];
        public currentFrame: number;
        static CreateAndStartAnimation(name: string, mesh: AbstractMesh, tartgetProperty: string, framePerSecond: number, totalFrame: number, from: any, to: any, loopMode?: number): void;
        constructor(name: string, targetProperty: string, framePerSecond: number, dataType: number, loopMode?: number);
        public isStopped(): boolean;
        public getKeys(): any[];
        public getEasingFunction(): IEasingFunction;
        public setEasingFunction(easingFunction: EasingFunction): void;
        public floatInterpolateFunction(startValue: number, endValue: number, gradient: number): number;
        public quaternionInterpolateFunction(startValue: Quaternion, endValue: Quaternion, gradient: number): Quaternion;
        public vector3InterpolateFunction(startValue: Vector3, endValue: Vector3, gradient: number): Vector3;
        public vector2InterpolateFunction(startValue: Vector2, endValue: Vector2, gradient: number): Vector2;
        public color3InterpolateFunction(startValue: Color3, endValue: Color3, gradient: number): Color3;
        public clone(): Animation;
        public setKeys(values: any[]): void;
        private _interpolate(currentFrame, repeatCount, loopMode, offsetValue?, highLimitValue?);
        public animate(delay: number, from: number, to: number, loop: boolean, speedRatio: number): boolean;
        private static _ANIMATIONTYPE_FLOAT;
        private static _ANIMATIONTYPE_VECTOR3;
        private static _ANIMATIONTYPE_QUATERNION;
        private static _ANIMATIONTYPE_MATRIX;
        private static _ANIMATIONTYPE_COLOR3;
        private static _ANIMATIONTYPE_VECTOR2;
        private static _ANIMATIONLOOPMODE_RELATIVE;
        private static _ANIMATIONLOOPMODE_CYCLE;
        private static _ANIMATIONLOOPMODE_CONSTANT;
        static ANIMATIONTYPE_FLOAT : number;
        static ANIMATIONTYPE_VECTOR3 : number;
        static ANIMATIONTYPE_VECTOR2 : number;
        static ANIMATIONTYPE_QUATERNION : number;
        static ANIMATIONTYPE_MATRIX : number;
        static ANIMATIONTYPE_COLOR3 : number;
        static ANIMATIONLOOPMODE_RELATIVE : number;
        static ANIMATIONLOOPMODE_CYCLE : number;
        static ANIMATIONLOOPMODE_CONSTANT : number;
    }
}
