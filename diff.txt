diff --git a/src/XR/features/WebXRControllerPointerSelection.ts b/src/XR/features/WebXRControllerPointerSelection.ts
index d49b2235cf..292e618607 100644
--- a/src/XR/features/WebXRControllerPointerSelection.ts
+++ b/src/XR/features/WebXRControllerPointerSelection.ts
@@ -328,7 +328,8 @@ export class WebXRControllerPointerSelection extends WebXRAbstractFeature {
         return null;
     }
 
-    public getPointerSelectionDisabledByPointerId(id: number): boolean {
+    /** @hidden */
+    public _getPointerSelectionDisabledByPointerId(id: number): boolean {
         const keys = Object.keys(this._controllers);
 
         for (let i = 0; i < keys.length; ++i) {
@@ -339,7 +340,8 @@ export class WebXRControllerPointerSelection extends WebXRAbstractFeature {
         return true;
     }
 
-    public setPointerSelectionDisabledByPointerId(id: number, state: boolean) {
+    /** @hidden */
+    public _setPointerSelectionDisabledByPointerId(id: number, state: boolean) {
         const keys = Object.keys(this._controllers);
 
         for (let i = 0; i < keys.length; ++i) {
diff --git a/src/XR/features/WebXRNearInteraction.ts b/src/XR/features/WebXRNearInteraction.ts
index ae7f12ff2f..ced5279832 100644
--- a/src/XR/features/WebXRNearInteraction.ts
+++ b/src/XR/features/WebXRNearInteraction.ts
@@ -422,14 +422,14 @@ export class WebXRNearInteraction extends WebXRAbstractFeature {
                     controllerData.pickedPointVisualCue.isVisible = true;
 
                     if (this._farInteractionFeature && this._farInteractionFeature.attached) {
-                        this._farInteractionFeature.setPointerSelectionDisabledByPointerId(controllerData.id, true);
+                        this._farInteractionFeature._setPointerSelectionDisabledByPointerId(controllerData.id, true);
                     }
                 } else {
                     controllerData.meshUnderPointer = null;
                     controllerData.pickedPointVisualCue.isVisible = false;
 
                     if (this._farInteractionFeature && this._farInteractionFeature.attached) {
-                        this._farInteractionFeature.setPointerSelectionDisabledByPointerId(controllerData.id, false);
+                        this._farInteractionFeature._setPointerSelectionDisabledByPointerId(controllerData.id, false);
                     }
                 }
             }
@@ -464,7 +464,7 @@ export class WebXRNearInteraction extends WebXRAbstractFeature {
 
     private _isControllerReadyForNearInteraction(id: number) {
         if (this._farInteractionFeature) {
-            return this._farInteractionFeature.getPointerSelectionDisabledByPointerId(id);
+            return this._farInteractionFeature._getPointerSelectionDisabledByPointerId(id);
         }
 
         return true;
diff --git a/src/XR/webXRSessionManager.ts b/src/XR/webXRSessionManager.ts
index e062697e5c..e5ebd19218 100644
--- a/src/XR/webXRSessionManager.ts
+++ b/src/XR/webXRSessionManager.ts
@@ -8,6 +8,7 @@ import { WebXRRenderTarget } from "./webXRTypes";
 import { WebXRManagedOutputCanvas, WebXRManagedOutputCanvasOptions } from "./webXRManagedOutputCanvas";
 import { Engine } from "../Engines/engine";
 import { WebGLRenderTargetWrapper } from "../Engines/WebGL/webGLRenderTargetWrapper";
+import { Color4 } from "../Maths/math.color";
 
 interface IRenderTargetProvider {
     getRenderTargetForEye(eye: XREye): Nullable<RenderTargetTexture>;
@@ -450,7 +451,7 @@ export class WebXRSessionManager implements IDisposable {
         renderTargetTexture._texture = internalTexture;
         renderTargetTexture.disableRescaling();
         if (this._sessionMode === 'immersive-ar') {
-            renderTargetTexture.skipInitialClear = true;
+            renderTargetTexture.clearColor = new Color4(0, 0, 0, 0);
         }
 
         // Store the render target texture for cleanup when the session ends.
